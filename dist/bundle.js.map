{"version":3,"file":"bundle.js","sources":["webpack:///webpack/bootstrap aa28e26aafbfccafb012","webpack:///./src/index.ts","webpack:///./src/main-menu.ts","webpack:///./src/base-level.ts","webpack:///./src/player.ts"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap aa28e26aafbfccafb012\n **/","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/// <reference path=\"../typings/browser.d.ts\"/>\n/// <reference path=\"../public/lib/phaser.d.ts\"/>\nvar Phaser = require('phaser');\nvar main_menu_ts_1 = require('./main-menu.ts');\nvar base_level_ts_1 = require('./base-level.ts');\nvar base_level_ts_2 = require('./base-level.ts');\nvar DrPhase = (function (_super) {\n    __extends(DrPhase, _super);\n    function DrPhase(width, height, game, name) {\n        _super.call(this, width, height, game, name);\n    }\n    return DrPhase;\n}(Phaser.Game));\nvar game = new DrPhase(800, 600, Phaser.AUTO, 'game');\ngame.state.add('MainMenu', main_menu_ts_1.MainMenu, true);\ngame.state.add('Saturday', base_level_ts_1.SaturdayLevel, true);\ngame.state.add('Sunday', base_level_ts_2.SundayLevel, true);\ngame.state.start('MainMenu');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.ts\n ** module id = 1\n ** module chunks = 0\n **/","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Phaser = require('phaser');\nvar MainMenu = (function (_super) {\n    __extends(MainMenu, _super);\n    function MainMenu() {\n        _super.call(this);\n    }\n    MainMenu.prototype.preload = function () {\n        this.game.load.spritesheet('player', 'assets/tiles/all_characters.png', 64, 64);\n    };\n    MainMenu.prototype.create = function () {\n        var _this = this;\n        this.game.stage.backgroundColor = '#337799';\n        var titleStyle = {\n            font: \"bold 46px Arial\",\n            fill: \"#d30\",\n            boundsAlignH: \"center\",\n            boundsAlignV: \"middle\"\n        };\n        var title = this.game.add.text(0, 0, \"Dr. Phase!\", titleStyle);\n        title.setShadow(3, 3, 'rgba(0,0,0,0.5)', 2);\n        title.setTextBounds(0, 0, 800, 100);\n        var water = this.game.add.sprite(50, 100, 'player');\n        water.frame = 1;\n        this.drawText(120, 80, \"Press '1' to become water. As water, you can move around with the arrow keys, but you'll fall through grates and drains.\");\n        var steam = this.game.add.sprite(50, 200, 'player');\n        steam.frame = 5;\n        this.drawText(120, 180, \"Press '2' to become steam. Steam rises and is blown by fans.\");\n        var ice = this.game.add.sprite(50, 300, 'player');\n        ice.frame = 0;\n        this.drawText(120, 280, \"Press '3' to become ice. Ice falls fast and is also blown by fans.\");\n        var rect = new Phaser.Rectangle(300, 450, 200, 100);\n        this.bar = this.game.add.graphics();\n        var style = {\n            font: \"bold 46px Arial\",\n            fill: \"#0d3\",\n            boundsAlignH: \"center\",\n            boundsAlignV: \"middle\"\n        };\n        var text = this.game.add.text(0, 0, \"START\", style);\n        text.setShadow(3, 3, 'rgba(0,0,0,0.5)', 2);\n        text.setTextBounds(rect.x, rect.y, rect.width, rect.height);\n        this.startRect = rect;\n        this.game.input.onDown.add(function (event) {\n            if (rect.contains(_this.game.input.x, _this.game.input.y)) {\n                _this.game.state.start('Sunday', true, false);\n            }\n        });\n    };\n    MainMenu.prototype.update = function () {\n        var rect = this.startRect;\n        this.bar.clear();\n        if (rect.contains(this.game.input.x, this.game.input.y)) {\n            this.bar.beginFill(0x000000, 0.2);\n            this.bar.drawRect(rect.x, rect.y, rect.width, rect.height);\n        }\n    };\n    MainMenu.prototype.drawText = function (x, y, message) {\n        var style = {\n            font: \"bold 22px Arial\",\n            fill: \"#fff\",\n            wordWrap: true,\n            wordWrapWidth: 650,\n            boundsAlignH: \"left\",\n            boundsAlignV: \"middle\"\n        };\n        var text = this.game.add.text(0, 0, message, style);\n        text.setShadow(3, 3, 'rgba(0,0,0,0.5)', 2);\n        text.setTextBounds(x, y, 700, 100);\n    };\n    return MainMenu;\n}(Phaser.State));\nexports.MainMenu = MainMenu;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/main-menu.ts\n ** module id = 3\n ** module chunks = 0\n **/","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Phaser = require('phaser');\nvar player_ts_1 = require('./player.ts');\nvar BaseLevel = (function (_super) {\n    __extends(BaseLevel, _super);\n    function BaseLevel() {\n        _super.call(this);\n        this.debug = false;\n    }\n    BaseLevel.prototype.preload = function () {\n        // Character assets.\n        this.game.load.image('steam', 'assets/images/steam.png');\n        this.game.load.spritesheet('player', 'assets/tiles/all_characters.png', 64, 64);\n        // Level assets.\n        this.game.load.image('platforms', 'assets/tiles/platforms.png');\n        this.game.load.image('pipes', 'assets/tiles/all_pipes.png');\n        this.game.load.image('grates', 'assets/tiles/grates.png');\n        this.game.load.spritesheet('fans', 'assets/tiles/fans.png', 64, 64);\n    };\n    BaseLevel.prototype.init = function (mapName) { this.mapName = mapName; };\n    BaseLevel.prototype.create = function () {\n        var _this = this;\n        this.game.physics.startSystem(Phaser.Physics.ARCADE);\n        this.game.physics.arcade.TILE_BIAS = 32;\n        this.game.stage.backgroundColor = \"#a9f0ff\";\n        // Possible fix for jittery sprites.\n        // See http://www.html5gamedevs.com/topic/15266-phaser-camera-jittering/\n        this.game.renderer.renderSession.roundPixels = true;\n        this.player = new player_ts_1.Player(this.game, this.map);\n        // Make the camera follow the sprite\n        this.game.camera.follow(this.player.sprite);\n        // Enable cursor keys so we can create some controls\n        this.cursors = this.game.input.keyboard.createCursorKeys();\n        var debugKey = this.game.input.keyboard.addKey(Phaser.Keyboard.M);\n        debugKey.onDown.add(function () { _this.debug = !_this.debug; });\n        var quitKey = this.game.input.keyboard.addKey(Phaser.Keyboard.ESC);\n        quitKey.onDown.add(function () { _this.game.state.start('MainMenu'); });\n    };\n    BaseLevel.prototype.update = function () {\n        // TODO Instead of passing this directly, allow touch or keyboard input.\n        this.player.update(this.cursors);\n        if (this.debug) {\n            this.game.debug.spriteInfo(this.player.sprite, 32, 32);\n        }\n    };\n    BaseLevel.prototype.render = function () {\n        // Enable debugging for player body.\n        if (this.debug) {\n            this.game.debug.body(this.player.sprite);\n        }\n    };\n    return BaseLevel;\n}(Phaser.State));\n// Individual levels are subclasses of BaseLevel so we can override stuff\n// as needed.\nvar SaturdayLevel = (function (_super) {\n    __extends(SaturdayLevel, _super);\n    function SaturdayLevel() {\n        _super.apply(this, arguments);\n    }\n    SaturdayLevel.prototype.preload = function () {\n        _super.prototype.preload.call(this);\n        this.game.load.tilemap('saturday_2', 'assets/saturday_2.json', null, Phaser.Tilemap.TILED_JSON);\n    };\n    SaturdayLevel.prototype.create = function () {\n        // TODO: Unfuck this bullshit.\n        LEFT_VENT_IDX = 4;\n        RIGHT_VENT_IDX = 6;\n        DUCT_IDX = 5;\n        this.map = new Map(this.game, 'saturday_2');\n        _super.prototype.create.call(this);\n    };\n    return SaturdayLevel;\n}(BaseLevel));\nexports.SaturdayLevel = SaturdayLevel;\nvar SundayLevel = (function (_super) {\n    __extends(SundayLevel, _super);\n    function SundayLevel() {\n        _super.apply(this, arguments);\n    }\n    SundayLevel.prototype.preload = function () {\n        _super.prototype.preload.call(this);\n        this.game.load.tilemap('sunday', 'assets/sunday.json', null, Phaser.Tilemap.TILED_JSON);\n    };\n    SundayLevel.prototype.create = function () {\n        LEFT_VENT_IDX = 18;\n        DUCT_IDX = 19;\n        RIGHT_VENT_IDX = 20;\n        GRATE_IDX = 12;\n        LEFT_FAN_IDX = 7;\n        RIGHT_FAN_IDX = 9;\n        DRAIN_IDX = 14;\n        DRAIN_EXIT = new Phaser.Point(30, 8);\n        this.map = new Map(this.game, 'sunday');\n        _super.prototype.create.call(this);\n    };\n    return SundayLevel;\n}(BaseLevel));\nexports.SundayLevel = SundayLevel;\n// Indecies of special tiles in the tilemap.\nvar LEFT_VENT_IDX;\nvar RIGHT_VENT_IDX;\nvar GRATE_IDX;\nvar LEFT_FAN_IDX;\nvar RIGHT_FAN_IDX;\nvar DUCT_IDX;\nvar DRAIN_IDX;\nvar DRAIN_EXIT;\nvar Map = (function () {\n    function Map(game, mapName) {\n        this.overVent = false;\n        this.game = game;\n        // Cheat so we can send vent events at the start of the game.\n        this.lastVentEventSent = -10;\n        // Add the tilemap and tileset image. The first parameter in addTilesetImage\n        // is the name you gave the tilesheet when importing it into Tiled, the\n        // second\n        // is the key to the asset in Phaser\n        this.tileMap = game.add.tilemap(mapName);\n        this.tileMap.addTilesetImage('platforms', 'platforms');\n        this.tileMap.addTilesetImage('grates', 'grates');\n        this.tileMap.addTilesetImage('pipes', 'pipes');\n        // Add the duct and platform layers.\n        this.ductLayer = this.tileMap.createLayer('ducts');\n        this.platformLayer = this.tileMap.createLayer('platforms');\n        // Load in the fans and start them spinning.\n        this.left_fans = this.game.add.group();\n        this.tileMap.createFromObjects('fans', LEFT_FAN_IDX, 'fans', 2, true, false, this.left_fans);\n        this.right_fans = this.game.add.group();\n        this.tileMap.createFromObjects('fans', RIGHT_FAN_IDX, 'fans', 0, true, false, this.right_fans);\n        // Set up animations for the fans.\n        this.left_fans.callAll('animations.add', 'animations', 'left_spin', [0, 1], 10, true);\n        this.left_fans.callAll('animations.play', 'animations', 'left_spin');\n        this.right_fans.callAll('animations.add', 'animations', 'right_spin', [2, 3], 10, true);\n        this.right_fans.callAll('animations.play', 'animations', 'right_spin');\n        // Before you can use the collide function you need to set what tiles can\n        // collide.\n        this.tileMap.setCollisionBetween(1, 100, true, 'platforms');\n        // Exclude non-vent tiles from collsion on the duct layer.\n        this.tileMap.setCollisionByExclusion([DUCT_IDX], true, 'ducts');\n        // Change the world size to match the size of this layer\n        this.platformLayer.resizeWorld();\n        this.tileMap.setTileIndexCallback([LEFT_VENT_IDX, RIGHT_VENT_IDX], this.onVentHit, this, 'ducts');\n        this.tileMap.setTileIndexCallback([DRAIN_IDX], this.onDrainHit, this, 'platforms');\n    }\n    // Callback triggered when a sprite collides with a vent.\n    Map.prototype.onVentHit = function (sprite, tile) {\n        // Only register the collision if we have a callback.\n        if (this.ventCallback) {\n            // Debounce this event.\n            var elapsedSinceLastEvent = this.game.time.totalElapsedSeconds() - this.lastVentEventSent;\n            // This delay is set to give us time to exit the vent after getting\n            // sucked through it. A better way would be to have the ventCallback\n            // return whether we should respect collisions.\n            if (elapsedSinceLastEvent >= 4) {\n                // Send a callback with the enter and exit points.\n                var height = tile.height / 2 - 20;\n                var width = tile.width / 2;\n                var from = new Phaser.Point(tile.worldX + width, tile.worldY + height);\n                var otherVent = this.getOtherVent(tile);\n                var to = new Phaser.Point(otherVent.worldX + width, otherVent.worldY + height);\n                this.ventCallback(from, to);\n                this.lastVentEventSent = this.game.time.totalElapsedSeconds();\n            }\n            return true;\n        }\n        return false;\n    };\n    // Given a vent tile, find the other vent tile in this map.\n    Map.prototype.getOtherVent = function (tile) {\n        // TODO Really, this is wrong. Instead, we should follow the duct until we\n        // hit the exit, moving the player sprite along the way.\n        var exitType = LEFT_VENT_IDX;\n        if (tile.index == LEFT_VENT_IDX) {\n            exitType = RIGHT_VENT_IDX;\n        }\n        var d = this.tileMap.layers[this.ductLayer.index].data;\n        console.log(d);\n        for (var row = 0; row < d.length; row++) {\n            for (var col = 0; col < d[row].length; col++) {\n                if (d[row][col].index == exitType) {\n                    return d[row][col];\n                }\n            }\n        }\n    };\n    // Callback triggered when a sprite collides with a drain.\n    Map.prototype.onDrainHit = function (sprite, tile) {\n        if ((Math.abs(sprite.x - tile.worldX) < 10) && this.drainCallback) {\n            var exitTile = this.tileMap.getTile(DRAIN_EXIT.x, DRAIN_EXIT.y, 'platforms', true);\n            this.drainCallback(new Phaser.Point(exitTile.worldX, exitTile.worldY));\n        }\n        return true;\n    };\n    Map.prototype.collidePlatforms = function (sprite, skipGrates) {\n        this.game.physics.arcade.collide(sprite, this.platformLayer, null, function (sprite, tile) {\n            if (skipGrates && tile.index == GRATE_IDX) {\n                return false;\n            }\n            return true;\n        });\n    };\n    Map.prototype.collideDucts = function (sprite) {\n        this.game.physics.arcade.collide(sprite, this.ductLayer);\n    };\n    Map.prototype.collideFans = function (sprite) {\n        // Fans will blow a sprite away from them if they're inline.\n        // Fans are only effective within 5 tiles.\n        var range = 5 * this.tileMap.tileWidth;\n        var fanCollisionLeft = new Phaser.Rectangle(sprite.x - range, sprite.y, range, sprite.height);\n        var fanCollisionRight = new Phaser.Rectangle(sprite.x + sprite.width, sprite.y, range, sprite.height);\n        // look to the right for fans blowing to the left.\n        this.left_fans.forEach(function (fan) {\n            var fanBox = new Phaser.Rectangle(fan.x, fan.y, fan.width, fan.height);\n            if (fanCollisionLeft.intersects(fanBox, 0.1)) {\n                var dist = Phaser.Point.distance(fan.worldPosition, sprite.worldPosition);\n                sprite.body.velocity.x += 1000 / dist;\n            }\n        }, null);\n        // and to the left for fans blowing to the right.\n        this.right_fans.forEach(function (fan) {\n            var fanBox = new Phaser.Rectangle(fan.x, fan.y, fan.width, fan.height);\n            if (fanCollisionRight.intersects(fanBox, 0.1)) {\n                var dist = Phaser.Point.distance(fan.worldPosition, sprite.worldPosition);\n                sprite.body.velocity.x -= 1000 / dist;\n            }\n        }, null);\n    };\n    // Example of how to work with the tilemap to change collision behavior.\n    // No longer used, but it shows how to search through the tile map.\n    Map.prototype.makePlatformsOneWay = function () {\n        var d = this.tileMap.layers[this.platformLayer.index].data;\n        console.log(d);\n        for (var row = 0; row < d.length; row++) {\n            for (var col = 0; col < d[row].length; col++) {\n                if (d[row][col].index > 0) {\n                    d[row][col].collideDown = false;\n                    d[row][col].collideLeft = false;\n                    d[row][col].collideRight = false;\n                }\n            }\n        }\n    };\n    return Map;\n}());\nexports.Map = Map;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/base-level.ts\n ** module id = 4\n ** module chunks = 0\n **/","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Phaser = require('phaser');\nvar Player = (function () {\n    function Player(game, map) {\n        var _this = this;\n        this.game = game;\n        this.map = map;\n        // Add the sprite to the game and enable arcade physics on it\n        this.sprite = game.add.sprite(10, 500, 'player');\n        this.game.physics.arcade.enable(this.sprite);\n        this.sprite.body.setSize(48, 48, 8, 6);\n        this.sprite.debug = true;\n        // Set some physics on the sprite\n        this.sprite.body.collideWorldBounds = true;\n        // The different characters are different frames in the same spritesheet.\n        this.sprite.animations.add('steam', [5, 6, 7, 6], 7, true);\n        this.sprite.animations.add('water', [1], 0, false);\n        this.sprite.animations.add('water_drain', [1, 2, 3], 8, false);\n        this.sprite.animations.add('ice', [0], 10, true);\n        this.waterState = new Water(this.sprite, this.map, this.game);\n        this.steamState = new Steam(this.sprite, this.map, this.game);\n        this.iceState = new Ice(this.sprite, this.map, this.game);\n        var waterKey = this.game.input.keyboard.addKey(Phaser.Keyboard.ONE);\n        var steamKey = this.game.input.keyboard.addKey(Phaser.Keyboard.TWO);\n        var iceKey = this.game.input.keyboard.addKey(Phaser.Keyboard.THREE);\n        waterKey.onDown.add(function () { _this.changeState(_this.waterState); });\n        steamKey.onDown.add(function () { _this.changeState(_this.steamState); });\n        iceKey.onDown.add(function () { _this.changeState(_this.iceState); });\n        // Start as water.\n        this.changeState(this.waterState);\n    }\n    Player.prototype.changeState = function (newState) {\n        if (this.currentState) {\n            if (!this.currentState.cleanup()) {\n                console.log(\"Not allowed to change state!\");\n                return;\n            }\n        }\n        newState.init();\n        this.currentState = newState;\n    };\n    Player.prototype.update = function (cursors) {\n        this.currentState.update(cursors);\n        // Clamp velocity so we don't clip through platforms.\n        this.sprite.body.velocity.y =\n            Phaser.Math.clamp(this.sprite.body.velocity.y, -1000, 1000);\n        // Player dies when they fall off the level.\n        var floor = this.map.tileMap.heightInPixels - 10;\n        var feet = this.sprite.body.y + this.sprite.body.height;\n        if (feet > floor) {\n            console.log(\"You died\");\n            window.alert(\"You died\");\n            this.game.state.start(this.game.state.current);\n        }\n    };\n    return Player;\n}());\nexports.Player = Player;\nvar CharacterState = (function () {\n    function CharacterState(sprite, map, game) {\n        this.sprite = sprite;\n        this.map = map;\n        this.game = game;\n    }\n    CharacterState.prototype.init = function () { console.log(\"Init unimplemented\"); };\n    CharacterState.prototype.update = function (cursors) { console.log(\"Update unimplemented\"); };\n    // Clean up the state before switching. Will\n    // return false if the state does not allow switching.\n    CharacterState.prototype.cleanup = function () { return true; };\n    CharacterState.prototype.disablePhysics = function () {\n        this.sprite.body.gravity.y = 0;\n        this.sprite.body.velocity.y = 0;\n        this.sprite.body.velocity.x = 0;\n    };\n    return CharacterState;\n}());\nvar Ice = (function (_super) {\n    __extends(Ice, _super);\n    function Ice() {\n        _super.apply(this, arguments);\n    }\n    Ice.prototype.init = function () {\n        this.sprite.animations.play('ice');\n        this.sprite.body.bounce.y = 0;\n        this.sprite.body.gravity.y = 4000;\n    };\n    Ice.prototype.update = function (cursors) {\n        // Ice collides with platforms but cannot be controlled.\n        this.map.collidePlatforms(this.sprite, false);\n        this.map.collideFans(this.sprite);\n    };\n    return Ice;\n}(CharacterState));\nvar Water = (function (_super) {\n    __extends(Water, _super);\n    function Water() {\n        _super.apply(this, arguments);\n    }\n    Water.prototype.init = function () {\n        var _this = this;\n        this.teleporting = false;\n        this.sprite.animations.play('water');\n        this.startPhysics();\n        this.map.drainCallback = function (to) { _this.teleportThroughDrain(to); };\n    };\n    Water.prototype.startPhysics = function () {\n        this.sprite.body.bounce.y = 0.2;\n        this.sprite.body.gravity.y = 1500;\n    };\n    Water.prototype.teleportThroughDrain = function (to) {\n        var _this = this;\n        if (this.teleporting) {\n            return;\n        }\n        console.log(\"Flowing through drain\");\n        this.teleporting = true;\n        this.disablePhysics();\n        var anim = this.sprite.animations.getAnimation('water_drain');\n        var moveToExit = this.game.add.tween(this.sprite).to(to, 1000, Phaser.Easing.Cubic.In);\n        moveToExit.onComplete.add(function () {\n            _this.teleporting = false;\n            _this.startPhysics();\n            _this.sprite.animations.play(\"water\");\n            _this.sprite.visible = true;\n            // Well, crap, ran out of time. If they make it to the drain, they won!\n            window.alert(\"You win! Dr.Phase escaped and will start his new life as a superhero!\");\n            _this.game.state.start(\"MainMenu\");\n        });\n        anim.onComplete.add(function () {\n            _this.sprite.visible = false;\n            moveToExit.start();\n        });\n        anim.play();\n    };\n    Water.prototype.update = function (cursors) {\n        // Make the sprite collide with the ground layer\n        this.map.collidePlatforms(this.sprite, true);\n        if (!this.teleporting && this.sprite.body.onFloor()) {\n            // Water can slide around.\n            if (cursors.left.isDown) {\n                this.sprite.body.velocity.x = -500;\n            }\n            else if (cursors.right.isDown) {\n                this.sprite.body.velocity.x = 500;\n            }\n            else {\n                this.sprite.body.velocity.x = 0;\n            }\n        }\n    };\n    Water.prototype.cleanup = function () {\n        if (this.teleporting) {\n            return false;\n        }\n        this.map.drainCallback = undefined;\n        return true;\n    };\n    return Water;\n}(CharacterState));\nvar Steam = (function (_super) {\n    __extends(Steam, _super);\n    function Steam(sprite, map, game) {\n        _super.call(this, sprite, map, game);\n        this.makeSteamTrail();\n    }\n    Steam.prototype.init = function () {\n        var _this = this;\n        this.lastExitVent = 0;\n        this.teleporting = false;\n        this.sprite.animations.play(\"steam\");\n        this.startPhysics();\n        this.map.ventCallback =\n            function (from, to) { _this.teleportThroughVent(from, to); };\n    };\n    Steam.prototype.makeSteamTrail = function () {\n        this.emitter = this.game.add.emitter(0, 0, 20);\n        this.emitter.makeParticles('steam');\n        this.emitter.setXSpeed(0, 0);\n        this.emitter.setYSpeed(0, 0);\n        this.emitter.setRotation(0, 0);\n        this.emitter.setAlpha(.5, 0, 3000);\n        this.emitter.setScale(0.2, 1, 0.2, 1, 6000, Phaser.Easing.Quintic.Out);\n        this.emitter.gravity = 25;\n        this.emitter.start(false, 3000, 50);\n        this.emitter.on = false;\n    };\n    Steam.prototype.startPhysics = function () {\n        this.sprite.body.bounce.y = 0.4;\n        this.sprite.body.gravity.y = -1000;\n    };\n    Steam.prototype.teleportThroughVent = function (from, to) {\n        var _this = this;\n        this.teleporting = true;\n        this.disablePhysics();\n        console.log(\"Teleport from \", from, to);\n        var shrink = this.game.add.tween(this.sprite.scale)\n            .to({ x: 0.1, y: 0.1 }, 500, Phaser.Easing.Cubic.In);\n        var expand = this.game.add.tween(this.sprite.scale)\n            .to({ x: 1, y: 1 }, 500, Phaser.Easing.Cubic.Out);\n        var enterVent = this.game.add.tween(this.sprite).to(from, 500, Phaser.Easing.Cubic.In);\n        var moveToExit = this.game.add.tween(this.sprite).to(to, 1000, Phaser.Easing.Cubic.In);\n        enterVent.chain(moveToExit);\n        enterVent.onStart.add(function () { shrink.start(); });\n        // Hide the sprite during teleport\n        moveToExit.onStart.add(function () {\n            _this.emitter.on = true;\n            _this.sprite.visible = false;\n        });\n        moveToExit.onComplete.add(function () {\n            _this.emitter.on = false;\n            _this.sprite.visible = true;\n        });\n        moveToExit.chain(expand);\n        expand.onComplete.add(function () {\n            console.log(\"Teleport done\");\n            _this.teleporting = false;\n            _this.startPhysics();\n        });\n        enterVent.start();\n    };\n    Steam.prototype.cleanup = function () {\n        if (this.teleporting) {\n            return false;\n        }\n        this.map.ventCallback = undefined;\n        return true;\n    };\n    Steam.prototype.update = function (cursors) {\n        // Steam just rises uncontrollably.\n        this.emitter.emitX = this.sprite.x;\n        this.emitter.emitY = this.sprite.y;\n        // Ignore collisions during teleport.\n        if (!this.teleporting) {\n            this.map.collideDucts(this.sprite);\n            this.map.collidePlatforms(this.sprite, true);\n            this.map.collideFans(this.sprite);\n        }\n    };\n    return Steam;\n}(CharacterState));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/player.ts\n ** module id = 5\n ** module chunks = 0\n **/"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACvsourceRoot":""}