{"version":3,"file":"bundle.js","sources":["webpack:///webpack/bootstrap 32a52339d9869646c258","webpack:///./src/index.ts"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 32a52339d9869646c258\n **/","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/// <reference path=\"../typings/browser.d.ts\"/>\n/// <reference path=\"../public/lib/phaser.d.ts\"/>\nvar Phaser = require('phaser');\nvar PhaseChangeGame = (function (_super) {\n    __extends(PhaseChangeGame, _super);\n    function PhaseChangeGame() {\n        _super.call(this);\n    }\n    PhaseChangeGame.prototype.init = function () {\n    };\n    PhaseChangeGame.prototype.preload = function () {\n        this.game.load.spritesheet('dude', 'assets/images/dude.png', 32, 48);\n        this.game.load.tilemap('tilemap', 'assets/level.json', null, Phaser.Tilemap.TILED_JSON);\n        this.game.load.image('tiles', 'assets/images/desert_tilesheet.png');\n    };\n    PhaseChangeGame.prototype.create = function () {\n        //Start the Arcade Physics systems\n        this.game.physics.startSystem(Phaser.Physics.ARCADE);\n        //Change the background colour\n        this.game.stage.backgroundColor = \"#a9f0ff\";\n        //Add the tilemap and tileset image. The first parameter in addTilesetImage\n        //is the name you gave the tilesheet when importing it into Tiled, the second\n        //is the key to the asset in Phaser\n        this.map = this.game.add.tilemap('tilemap');\n        this.map.addTilesetImage('Desert', 'tiles');\n        //Add both the background and ground layers. We won't be doing anything with the\n        //GroundLayer though\n        //this.backgroundLayer = this.map.createLayer('BackgroundLayer');\n        this.groundLayer = this.map.createLayer('GroundLayer');\n        //this.groundLayer.scale.set(0.9,0.9);\n        //Before you can use the collide function you need to set what tiles can collide\n        this.map.setCollisionBetween(1, 100, true, 'GroundLayer');\n        //Add the sprite to the game and enable arcade physics on it\n        this.sprite = this.game.add.sprite(10, 0, 'dude');\n        this.game.physics.arcade.enable(this.sprite);\n        //Change the world size to match the size of this layer\n        this.groundLayer.resizeWorld();\n        //Set some physics on the sprite\n        this.sprite.body.bounce.y = 0.2;\n        this.sprite.body.gravity.y = 2000;\n        this.sprite.body.gravity.x = 20;\n        //this.sprite.body.velocity.x = 100;\n        //Create a running animation for the sprite and play it\n        this.sprite.animations.add('right', [5, 6, 7, 8], 10, true);\n        this.sprite.animations.play('right');\n        //Make the camera follow the sprite\n        this.game.camera.follow(this.sprite);\n        //Enable cursor keys so we can create some controls\n        this.cursors = this.game.input.keyboard.createCursorKeys();\n    };\n    PhaseChangeGame.prototype.update = function () {\n        //Make the sprite collide with the ground layer\n        this.game.physics.arcade.collide(this.sprite, this.groundLayer);\n        //Make the sprite jump when the up key is pushed\n        if (this.cursors.up.isDown) {\n            this.sprite.body.velocity.y = -500;\n        }\n    };\n    return PhaseChangeGame;\n}(Phaser.State));\nvar game = new Phaser.Game(640, 400, Phaser.AUTO, 'game');\ngame.state.add('Game', PhaseChangeGame, true);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.ts\n ** module id = 1\n ** module chunks = 0\n **/"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;","sourceRoot":""}